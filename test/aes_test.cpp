#include "unity.h"
#include <cstring>
#include <cstdio>
#include <stdint.h>
#include <stddef.h>

// #define the macros below to 1/0 to enable/disable the mode of operation.
//
// CBC enables AES encryption in CBC-mode of operation.
// CTR enables encryption in counter-mode.
// ECB enables the basic ECB 16-byte block algorithm. All can be enabled simultaneously.

// The #ifndef-guard allows it to be configured before #include'ing or at compile time.
#ifndef CBC
#define CBC 1
#endif

#define AES128 1
// #define AES192 1
// #define AES256 1

#define AES_BLOCKLEN 16 // Block length in bytes - AES is 128b block only

#define AES_KEYLEN 16 // Key length in bytes
#define AES_keyExpSize 176
// The number of columns comprising a state in AES. This is a constant in AES. Value=4
#define Nb 4
#define Nk 4  // The number of 32 bit words in a key.
#define Nr 10 // The number of rounds in AES Cipher.


// jcallan@github points out that declaring Multiply as a function
// reduces code size considerably with the Keil ARM compiler.
// See this link for more information: https://github.com/kokke/tiny-AES-C/pull/3
#ifndef MULTIPLY_AS_A_FUNCTION
#define MULTIPLY_AS_A_FUNCTION 0
#endif
struct AES_ctx
{
    uint8_t RoundKey[AES_keyExpSize];
#if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1))
    uint8_t Iv[AES_BLOCKLEN];
#endif
};

void AES_init_ctx(struct AES_ctx *ctx, const uint8_t *key);
#if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1))
void AES_init_ctx_iv(struct AES_ctx *ctx, const uint8_t *key, const uint8_t *iv);
void AES_ctx_set_iv(struct AES_ctx *ctx, const uint8_t *iv);
#endif

#if defined(CBC) && (CBC == 1)
// buffer size MUST be mutile of AES_BLOCKLEN;
// Suggest https://en.wikipedia.org/wiki/Padding_(cryptography)#PKCS7 for padding scheme
// NOTES: you need to set IV in ctx via AES_init_ctx_iv() or AES_ctx_set_iv()
//        no IV should ever be reused with the same key
void AES_CBC_encrypt_buffer(struct AES_ctx *ctx, uint8_t *buf, size_t length);
void AES_CBC_decrypt_buffer(struct AES_ctx *ctx, uint8_t *buf, size_t length);

#endif // #if defined(CBC) && (CBC == 1)

/*

This is an implementation of the AES algorithm, specifically ECB, CTR and CBC mode.
Block size can be chosen in aes.h - available choices are AES128, AES192, AES256.

The implementation is verified against the test vectors in:
  National Institute of Standards and Technology Special Publication 800-38A 2001 ED

ECB-AES128
----------

  plain-text:
    6bc1bee22e409f96e93d7e117393172a
    ae2d8a571e03ac9c9eb76fac45af8e51
    30c81c46a35ce411e5fbc1191a0a52ef
    f69f2445df4f9b17ad2b417be66c3710

  key:
    2b7e151628aed2a6abf7158809cf4f3c

  resulting cipher
    3ad77bb40d7a3660a89ecaf32466ef97
    f5d3d58503b9699de785895a96fdbaaf
    43b1cd7f598ece23881b00e3ed030688
    7b0c785e27e8ad3f8223207104725dd4


NOTE:   String length must be evenly divisible by 16byte (str_len % 16 == 0)
        You should pad the end of the string with zeros if this is not the case.
        For AES192/256 the key size is proportionally larger.

*/


/*****************************************************************************/
/* Private variables:                                                        */
/*****************************************************************************/
// state - array holding the intermediate results during decryption.
typedef uint8_t state_t[4][4];

// The lookup-tables are marked const so they can be placed in read-only storage instead of RAM
// The numbers below can be computed dynamically trading ROM for RAM -
// This can be useful in (embedded) bootloader applications, where ROM is often limited.
static const uint8_t sbox[256] = {
    // 0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16};

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static const uint8_t rsbox[256] = {
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d};
#endif

// The round constant word array, Rcon[i], contains the values given by
// x to the power (i-1) being powers of x (x is denoted as {02}) in the field GF(2^8)
static const uint8_t Rcon[11] = {
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};

/*
 * Jordan Goulder points out in PR #12 (https://github.com/kokke/tiny-AES-C/pull/12),
 * that you can remove most of the elements in the Rcon array, because they are unused.
 *
 * From Wikipedia's article on the Rijndael key schedule @ https://en.wikipedia.org/wiki/Rijndael_key_schedule#Rcon
 *
 * "Only the first some of these constants are actually used â€“ up to rcon[10] for AES-128 (as 11 round keys are needed),
 *  up to rcon[8] for AES-192, up to rcon[7] for AES-256. rcon[0] is not used in AES algorithm."
 */

/*****************************************************************************/
/* Private functions:                                                        */
/*****************************************************************************/
/*
static uint8_t getSBoxValue(uint8_t num)
{
  return sbox[num];
}
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t *RoundKey, const uint8_t *Key)
{
    unsigned i, j, k;
    uint8_t tempa[4]; // Used for the column/row operations

    // The first round key is the key itself.
    for (i = 0; i < Nk; ++i)
    {
        RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
        RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
        RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
        RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
    }

    // All other round keys are found from the previous round keys.
    for (i = Nk; i < Nb * (Nr + 1); ++i)
    {
        {
            k = (i - 1) * 4;
            tempa[0] = RoundKey[k + 0];
            tempa[1] = RoundKey[k + 1];
            tempa[2] = RoundKey[k + 2];
            tempa[3] = RoundKey[k + 3];
        }

        if (i % Nk == 0)
        {
            // This function shifts the 4 bytes in a word to the left once.
            // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

            // Function RotWord()
            {
                const uint8_t u8tmp = tempa[0];
                tempa[0] = tempa[1];
                tempa[1] = tempa[2];
                tempa[2] = tempa[3];
                tempa[3] = u8tmp;
            }

            // SubWord() is a function that takes a four-byte input word and
            // applies the S-box to each of the four bytes to produce an output word.

            // Function Subword()
            {
                tempa[0] = getSBoxValue(tempa[0]);
                tempa[1] = getSBoxValue(tempa[1]);
                tempa[2] = getSBoxValue(tempa[2]);
                tempa[3] = getSBoxValue(tempa[3]);
            }

            tempa[0] = tempa[0] ^ Rcon[i / Nk];
        }
#if defined(AES256) && (AES256 == 1)
        if (i % Nk == 4)
        {
            // Function Subword()
            {
                tempa[0] = getSBoxValue(tempa[0]);
                tempa[1] = getSBoxValue(tempa[1]);
                tempa[2] = getSBoxValue(tempa[2]);
                tempa[3] = getSBoxValue(tempa[3]);
            }
        }
#endif
        j = i * 4;
        k = (i - Nk) * 4;
        RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
        RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
        RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
        RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
    }
}

void AES_init_ctx(struct AES_ctx *ctx, const uint8_t *key)
{
    KeyExpansion(ctx->RoundKey, key);
}
#if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1))
void AES_init_ctx_iv(struct AES_ctx *ctx, const uint8_t *key, const uint8_t *iv)
{
    KeyExpansion(ctx->RoundKey, key);
    memcpy(ctx->Iv, iv, AES_BLOCKLEN);
}
void AES_ctx_set_iv(struct AES_ctx *ctx, const uint8_t *iv)
{
    memcpy(ctx->Iv, iv, AES_BLOCKLEN);
}
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t *state, const uint8_t *RoundKey)
{
    uint8_t i, j;
    for (i = 0; i < 4; ++i)
    {
        for (j = 0; j < 4; ++j)
        {
            (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
        }
    }
}

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t *state)
{
    uint8_t i, j;
    for (i = 0; i < 4; ++i)
    {
        for (j = 0; j < 4; ++j)
        {
            (*state)[j][i] = getSBoxValue((*state)[j][i]);
        }
    }
}

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t *state)
{
    uint8_t temp;

    // Rotate first row 1 columns to left
    temp = (*state)[0][1];
    (*state)[0][1] = (*state)[1][1];
    (*state)[1][1] = (*state)[2][1];
    (*state)[2][1] = (*state)[3][1];
    (*state)[3][1] = temp;

    // Rotate second row 2 columns to left
    temp = (*state)[0][2];
    (*state)[0][2] = (*state)[2][2];
    (*state)[2][2] = temp;

    temp = (*state)[1][2];
    (*state)[1][2] = (*state)[3][2];
    (*state)[3][2] = temp;

    // Rotate third row 3 columns to left
    temp = (*state)[0][3];
    (*state)[0][3] = (*state)[3][3];
    (*state)[3][3] = (*state)[2][3];
    (*state)[2][3] = (*state)[1][3];
    (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
    return ((x << 1) ^ (((x >> 7) & 1) * 0x1b));
}

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t *state)
{
    uint8_t i;
    uint8_t Tmp, Tm, t;
    for (i = 0; i < 4; ++i)
    {
        t = (*state)[i][0];
        Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3];
        Tm = (*state)[i][0] ^ (*state)[i][1];
        Tm = xtime(Tm);
        (*state)[i][0] ^= Tm ^ Tmp;
        Tm = (*state)[i][1] ^ (*state)[i][2];
        Tm = xtime(Tm);
        (*state)[i][1] ^= Tm ^ Tmp;
        Tm = (*state)[i][2] ^ (*state)[i][3];
        Tm = xtime(Tm);
        (*state)[i][2] ^= Tm ^ Tmp;
        Tm = (*state)[i][3] ^ t;
        Tm = xtime(Tm);
        (*state)[i][3] ^= Tm ^ Tmp;
    }
}

// Multiply is used to multiply numbers in the field GF(2^8)
// Note: The last call to xtime() is unneeded, but often ends up generating a smaller binary
//       The compiler seems to be able to vectorize the operation better this way.
//       See https://github.com/kokke/tiny-AES-c/pull/34
#if MULTIPLY_AS_A_FUNCTION
static uint8_t Multiply(uint8_t x, uint8_t y)
{
    return (((y & 1) * x) ^
            ((y >> 1 & 1) * xtime(x)) ^
            ((y >> 2 & 1) * xtime(xtime(x))) ^
            ((y >> 3 & 1) * xtime(xtime(xtime(x)))) ^
            ((y >> 4 & 1) * xtime(xtime(xtime(xtime(x)))))); /* this last call to xtime() can be omitted */
}
#else
#define Multiply(x, y)                         \
    (((y & 1) * x) ^                           \
     ((y >> 1 & 1) * xtime(x)) ^               \
     ((y >> 2 & 1) * xtime(xtime(x))) ^        \
     ((y >> 3 & 1) * xtime(xtime(xtime(x)))) ^ \
     ((y >> 4 & 1) * xtime(xtime(xtime(xtime(x))))))

#endif

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
/*
static uint8_t getSBoxInvert(uint8_t num)
{
  return rsbox[num];
}
*/
#define getSBoxInvert(num) (rsbox[(num)])

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t *state)
{
    int i;
    uint8_t a, b, c, d;
    for (i = 0; i < 4; ++i)
    {
        a = (*state)[i][0];
        b = (*state)[i][1];
        c = (*state)[i][2];
        d = (*state)[i][3];

        (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
        (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
        (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
        (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
    }
}

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t *state)
{
    uint8_t i, j;
    for (i = 0; i < 4; ++i)
    {
        for (j = 0; j < 4; ++j)
        {
            (*state)[j][i] = getSBoxInvert((*state)[j][i]);
        }
    }
}

static void InvShiftRows(state_t *state)
{
    uint8_t temp;

    // Rotate first row 1 columns to right
    temp = (*state)[3][1];
    (*state)[3][1] = (*state)[2][1];
    (*state)[2][1] = (*state)[1][1];
    (*state)[1][1] = (*state)[0][1];
    (*state)[0][1] = temp;

    // Rotate second row 2 columns to right
    temp = (*state)[0][2];
    (*state)[0][2] = (*state)[2][2];
    (*state)[2][2] = temp;

    temp = (*state)[1][2];
    (*state)[1][2] = (*state)[3][2];
    (*state)[3][2] = temp;

    // Rotate third row 3 columns to right
    temp = (*state)[0][3];
    (*state)[0][3] = (*state)[1][3];
    (*state)[1][3] = (*state)[2][3];
    (*state)[2][3] = (*state)[3][3];
    (*state)[3][3] = temp;
}
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t *state, const uint8_t *RoundKey)
{
    uint8_t round = 0;

    // Add the First round key to the state before starting the rounds.
    AddRoundKey(0, state, RoundKey);

    // There will be Nr rounds.
    // The first Nr-1 rounds are identical.
    // These Nr rounds are executed in the loop below.
    // Last one without MixColumns()
    for (round = 1;; ++round)
    {
        SubBytes(state);
        ShiftRows(state);
        if (round == Nr)
        {
            break;
        }
        MixColumns(state);
        AddRoundKey(round, state, RoundKey);
    }
    // Add round key to last round
    AddRoundKey(Nr, state, RoundKey);
}

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t *state, const uint8_t *RoundKey)
{
    uint8_t round = 0;

    // Add the First round key to the state before starting the rounds.
    AddRoundKey(Nr, state, RoundKey);

    // There will be Nr rounds.
    // The first Nr-1 rounds are identical.
    // These Nr rounds are executed in the loop below.
    // Last one without InvMixColumn()
    for (round = (Nr - 1);; --round)
    {
        InvShiftRows(state);
        InvSubBytes(state);
        AddRoundKey(round, state, RoundKey);
        if (round == 0)
        {
            break;
        }
        InvMixColumns(state);
    }
}
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

/*****************************************************************************/
/* Public functions:                                                         */
/*****************************************************************************/

#if defined(CBC) && (CBC == 1)

static void XorWithIv(uint8_t *buf, const uint8_t *Iv)
{
    uint8_t i;
    for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
    {
        buf[i] ^= Iv[i];
    }
}

void AES_CBC_decrypt_buffer(struct AES_ctx *ctx, uint8_t *buf, size_t length)
{
    size_t i;
    uint8_t storeNextIv[AES_BLOCKLEN];
    for (i = 0; i < length; i += AES_BLOCKLEN)
    {
        memcpy(storeNextIv, buf, AES_BLOCKLEN);
        InvCipher((state_t *)buf, ctx->RoundKey);
        XorWithIv(buf, ctx->Iv);
        memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
        buf += AES_BLOCKLEN;
    }
}

#endif // #if defined(CBC) && (CBC == 1)

#undef AES192
void setUp(void)
{
    // set stuff up here
}

void tearDown(void)
{
    // clean stuff up here
}

void test_test(void)
{

    TEST_ASSERT_EQUAL(32, 32);
}
static void phex(uint8_t* str, int len=16)
{

    unsigned char i;
    for (i = 0; i < len; ++i)
        {
            printf("%.2X,", str[i]);
            if(i!=0 &&i%16==0)
                printf("\n");
            }
    printf("\n");
}

static void phexWithoutSeparator(uint8_t* str, int len=16)
{

    unsigned char i;
    for (i = 0; i < len; ++i)
        {
            printf("%.2X", str[i]);

}
    printf("\n");
}

  // apator 16-2
  float get_value(uint8_t* telegram)  {
    uint32_t usage = 0;
    size_t i = 25;
      float water_usage=0;
 usage = ((uint32_t)telegram[i+3] << 24) | ((uint32_t)telegram[i+2] << 16) |
                ((uint32_t)telegram[i+1] << 8)  | ((uint32_t)telegram[i+0]);
     water_usage = (usage ) / 1000.0;
    return water_usage;
  }

  void generate_iv(const uint8_t *packet, uint8_t *iv)
{
    int i=0;
  uint8_t tpl_acc=packet[11];
  //printf("tpl_acc:%s\n", tpl_acc);
     uint8_t dll_mfct_b[2]={0x01,0x06};
        //id + version + type
        uint8_t dll_a[6]={0x87,0x98, 0x71,  0x02,0x05,0x07};
        //mine is here
        // M-field
        iv[i++] = dll_mfct_b[0]; 
        iv[i++] = dll_mfct_b[1];

        // A-field
        for (int j=0; j<6; ++j) { iv[i++] = dll_a[j]; }
    for (int j=0; j<8; ++j) { iv[i++] = tpl_acc; }
}
class Frame{
    public:
    Frame(){}
    uint8_t lenght=10;
    uint8_t dll_c;
    uint8_t dll_mfct[2];
    uint8_t dll_id[4];
    uint8_t dll_version;
    uint8_t dll_type;
    uint8_t tpl_ci_field;
    uint8_t tpl_acc_field; 
   
};
 void display(Frame f)
    { 
        printf("%s lenght\n",f.lenght);
       /*
        printf("%s dll-c\n",this->dll_c);
        printf("%s%s dll-mfct\n",this->dll_mfct[0],this->dll_mfct[1]);
        printf("%s%s%s%s dll-id\n",this->dll_id[0],this->dll_id[1],this->dll_id[2],this->dll_id[3]);
        printf("%s dll-version\n",this->dll_version);
        printf("%s dll-type\n",this->dll_type);
        printf("%s dll-ci-field\n",this->tpl_ci_field);
        printf("%s tpl-acc-field\n",this->tpl_acc_field);
        */
    }
void extract_payload(const uint8_t *packet, uint8_t * extractedPayload, uint8_t payloadIndex=17){
    /*
Frame frame;
frame.lenght=packet[0];
frame.dll_c=packet[1];
frame.dll_mfct[0]=packet[2];
frame.dll_mfct[1]=packet[3];
frame.dll_id[0]=packet[4];
frame.dll_id[1]=packet[5];
frame.dll_id[2]=packet[6];
frame.dll_id[3]=packet[7];
frame.dll_version=packet[8];
frame.dll_type=packet[9];
frame.tpl_ci_field=packet[10];
frame.tpl_acc_field=packet[11];
*/
int j=0;
   for (int i = payloadIndex; j < 254; i++)
  {
    //play here with value
    
    if(i==28 || i==29  || i==46||i==47||i==64||i==65||i==82||i==83||i==100||i==101||i==118||i==119)
    {
        continue;
    }
    
    extractedPayload[j] = packet[i];
    j++;
  }
  //return frame;
}

void test_decrypt_cbc(void)
{

#if defined(AES256)
    uint8_t key[] = {0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
                     0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4};
    uint8_t in[] = {0xf5, 0x8c, 0x4c, 0x04, 0xd6, 0xe5, 0xf1, 0xba, 0x77, 0x9e, 0xab, 0xfb, 0x5f, 0x7b, 0xfb, 0xd6,
                    0x9c, 0xfc, 0x4e, 0x96, 0x7e, 0xdb, 0x80, 0x8d, 0x67, 0x9f, 0x77, 0x7b, 0xc6, 0x70, 0x2c, 0x7d,
                    0x39, 0xf2, 0x33, 0x69, 0xa9, 0xd9, 0xba, 0xcf, 0xa5, 0x30, 0xe2, 0x63, 0x04, 0x23, 0x14, 0x61,
                    0xb2, 0xeb, 0x05, 0xe2, 0xc3, 0x9b, 0xe9, 0xfc, 0xda, 0x6c, 0x19, 0x07, 0x8c, 0x6a, 0x9d, 0x1b};
#elif defined(AES192)
    uint8_t key[] = {0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5, 0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b};
    uint8_t in[] = {0x4f, 0x02, 0x1d, 0xb2, 0x43, 0xbc, 0x63, 0x3d, 0x71, 0x78, 0x18, 0x3a, 0x9f, 0xa0, 0x71, 0xe8,
                    0xb4, 0xd9, 0xad, 0xa9, 0xad, 0x7d, 0xed, 0xf4, 0xe5, 0xe7, 0x38, 0x76, 0x3f, 0x69, 0x14, 0x5a,
                    0x57, 0x1b, 0x24, 0x20, 0x12, 0xfb, 0x7a, 0xe0, 0x7f, 0xa9, 0xba, 0xac, 0x3d, 0xf1, 0x02, 0xe0,
                    0x08, 0xb0, 0xe2, 0x79, 0x88, 0x59, 0x88, 0x81, 0xd9, 0x20, 0xa9, 0xe6, 0x4f, 0x56, 0x15, 0xcd};
#elif defined(AES128)
    uint8_t key[] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
    uint8_t in[] = {0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d,
                    0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a, 0x91, 0x76, 0x78, 0xb2,
                    0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16, 0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16,
                    0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09, 0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7};
#endif
    uint8_t iv[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
    uint8_t out[] = {0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
                     0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
                     0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
                     0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10};
    //  uint8_t buffer[64];
    struct AES_ctx ctx;

    AES_init_ctx_iv(&ctx, key, iv);
    AES_CBC_decrypt_buffer(&ctx, in, 64);
    printf("CBC decrypt: ");

    if (0 == memcmp((char *)out, (char *)in, 64))
    {
        printf("SUCCESS!\n");
        TEST_ASSERT_EQUAL(1, 1);
    }
    else
    {
        printf("FAILURE!\n");
        TEST_ASSERT_EQUAL(1, 0);
    }
}

void test_decrypt_cbc_mine(void)
{
  
    uint8_t key[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
     // 4f8874e4525Bfa2cd5eB6586a94aa19a70ce7fada6fc4e70eBd79f67c441dc3d33d510e09f180370aBdc4ef1716976Ba796ef19d1a4c663ca042014a1713aff2d6fBf9e945e61Bf2156f2d906f6a009B7df196921177B3828287e6f0638ce2a7e0cadBa08BB3c9855BB05d4a
    uint8_t in[] = {
0x92,0x16,0xA3,0x42,0x75,0x8D,0x90,0xFC,0x2C,0x71,0xDA,0x17,0x33,0x21,0x69,0x67,
0x33,0xA9,0x09,0xFB,0xC3,0xE3,0x8E,0xCA,0x41,0x79,0x2E,0x7B,0xC0,0xD2,0x23,0x61,
0xBC,0xD7,0xED,0x75,0xBF,0x38,0xC5,0xAB,0xBA,0x1D,0xC1,0xDD,0x1A,0x54,0xF0,0xF4,
0x53,0xAB,0x12,0x6B,0xD0,0x93,0x38,0x08,0xA8,0x65,0xC1,0xB1,0xD8,0xED,0x43,0xD8,
0x0B,0x6A,0x9C,0x2F,0x57,0xF3,0xDA,0xA7,0xEA,0x36,0xA1,0x35,0xFE,0x61,0x21,0xB4,
0xBB,0x52,0xF6,0x1A,0xFE,0x33,0xE1,0x01,0xAE,0xAA,0x5E,0xE4,0x72,0x93,0x9F,0xC4};
/*
(TPL) IV 
0x01,0x06,0x87,0x98,0x71,0x02,0x05,0x07,0x7F,0x7F,0x7F,0x7F,0x7F,0x7F,0x7F,0x7F
(TPL) decrypted  "2F2F0FD04457971E02004337028450AB
                  F5F930F6132A0000105F3A00007B0159
                  380000FA28000089200000121F000070
                  1E0000221E0000831B0000170C000096
                  000000670000006700000066000000A0
                  1BFECE03FFFFFFFFFFFFFFFFFFFFEC52"
*/
    uint8_t iv[] = {0x01,0x06,0x87,0x98,0x71,0x02,0x05,0x07,0x7F,0x7F,0x7F,0x7F,0x7F,0x7F,0x7F,0x7F};
    uint8_t out[] = {
0x2f,0x2f,0x0f,0xd0,0x44,0x57,0x97,0x1e,0x02,0x00,0x43,0x37,0x02,0x84,0x50,0xab,
0xf5,0xf9,0x30,0xf6,0x13,0x2a,0x00,0x00,0x10,0x5f,0x3a,0x00,0x00,0x7b,0x01,0x59,
0x38,0x00,0x00,0xfa,0x28,0x00,0x00,0x89,0x20,0x00,0x00,0x12,0x1f,0x00,0x00,0x70,
0x1e,0x00,0x00,0x22,0x1e,0x00,0x00,0x83,0x1b,0x00,0x00,0x17,0x0c,0x00,0x00,0x96,
0x00,0x00,0x00,0x67,0x00,0x00,0x00,0x67,0x00,0x00,0x00,0x66,0x00,0x00,0x00,0xa0,
0x1b,0xfe,0xce,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xec,0x52,};
    //  uint8_t buffer[64];
    struct AES_ctx ctx;

    AES_init_ctx_iv(&ctx, key, iv);
    AES_CBC_decrypt_buffer(&ctx, in, 96);
phex(in, 96);
    printf("CBC decrypt: ");

    if (0 == memcmp((char *)out, (char *)in, 96))
    {
        printf("SUCCESS!\n");
        TEST_ASSERT_EQUAL(1, 1);
    }
    else
    {
        printf("FAILURE!\n");
        TEST_ASSERT_EQUAL(1, 0);
    }
}

void test_decrypt_cbc_mine_2(void)
{
  
    uint8_t key[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
   
    uint8_t packet[]={0x6E,0x44,0x01,0x06,0x87,0x98,0x71,0x02,0x05,0x07,0x7A,0xB3,0x00,0x60,0x85,0x3B,0x7C,0xE2,0x9E,0x5E,0xAC,0x29,0x65,0xB9,0x1E,0x80,0x1F,0x1F,0xA5,0xCF,0xE3,0x94,0x1C,0xC5,0x57,0x68,0x9B,0x32,0x83,0x60,0x3C,0x19,0xBB,0xD3,0x73,0x7E,0x40,0xD0,0x7A,0x3F,0x49,0xFC,0xFA,0xF1,0xBE,0xD9,0xB6,0xCF,0x7B,0xDC,0x3B,0x09,0x5B,0xBD,0x49,0x9C,0x11,0xEC,0x59,0x75,0xC0,0x0F,0xDE,0x40,0xC2,0x6D,0x26,0x95,0x2F,0x77,0x70,0x45,0xDC,0x6D,0xC8,0xC5,0x88,0x50,0x53,0xED,0x9F,0x45,0xE8,0x6F,0xC4,0x54,0x76,0xBD,0x29,0x25,0x95,0x63,0x56,0x41,0xA3,0x91,0x18,0x28,0xC6,0xD8,0x34};
    uint8_t in[96];
     uint8_t iv[16];
   
    uint8_t out[] = {
0x2F,0x2F,0x0F,0x9C,0x76,0xD7,0x97,0x1E,0x02,0x00,0x43,0x49,0x02,0x82,0x9A,0x4A,0xD3,0x14,0x6E,0xDA,0xFF,0xFA,0x5B,0x08,0x10,0x82,0x45,0x00,0x00,0x7B,0x01,0x59,0x38,0x00,0x00,0xFA,0x28,0x00,0x00,0x89,0x20,0x00,0x00,0x12,0x1F,0x00,0x00,0x70,0x1E,0x00,0x00,0x22,0x1E,0x00,0x00,0x83,0x1B,0x00,0x00,0x17,0x0C,0x00,0x00,0x96,0x00,0x00,0x00,0x67,0x00,0x00,0x00,0x67,0x00,0x00,0x00,0x66,0x00,0x00,0x00,0xA0,0x1B,0xFE,0xCE,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x06,0x61};
    //  uint8_t buffer[64];
    struct AES_ctx ctx;

     uint8_t tpl_acc=packet[11];

 generate_iv(packet,iv);
 extract_payload(packet, in);
 
 //display(&f);
 //0106879871020507B3B3B3B3B3B3B3B3
 printf("IV:\n");
 phex(iv);
 printf("Payload:\n");
 phex(in);
    AES_init_ctx_iv(&ctx, key, iv);
    AES_CBC_decrypt_buffer(&ctx, in, 96);
phex(in, 96);
    printf("CBC decrypt: ");

    if (0 == memcmp((char *)out, (char *)in, 96))
    {
        printf("SUCCESS!\n");
        TEST_ASSERT_EQUAL(1, 1);
    }
    else
    {
        printf("FAILURE!\n");
        TEST_ASSERT_EQUAL(1, 0);
    }
}


void test_decrypt_cbc_mine_3(void)
{
  
    uint8_t key[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
     // 
    uint8_t packet[]={0x6E,0x44,0x01,0x06,0x87,0x98,0x71,0x02,0x05,0x07,0x0F,0x97,0x7A,0xA5,0x00,0x60,0x85,0x01,0x67,0x09,0xA1,0xB6,0x1C,0xF1,0xF1,0xA6,0x08,0xCE,0x11,0x02,0xBF,0x48,0xF9,0x6D,0x77,0x75,0x9F,0xA4,0xFE,0x8E,0x33,0x58,0xA7,0x35,0x0D,0xF0,0xEC,0xEC,0xD5,0x38,0xF4,0x38,0x2D,0xC4,0x0B,0x9E,0x65,0x34,0xB2,0x1F,0xC8,0x33,0x6F,0x85,0x23,0x0A,0xE9,0x0B,0x33,0x5F,0x9F,0x88,0x32,0x86,0x48,0xA6,0x9A,0xE7,0x8C,0x71,0xD1,0x74,0x9D,0x77,0xD6,0x43,0xE3,0x8E,0x45,0x87,0x3D,0x98,0x21,0x7C,0xDC,0x5E,0xB6,0x96,0xFD,0xC3,0x2E,0x85,0x38,0x2A,0x4B,0xF7,0x4A,0x0B,0x32,0x8B,0xCC,0xE4,0x8D,0x40,0x04,0x13,0x09,0x2A,0x54,0xB9,0xB0,0x57,0xAE,0xDD,0x33,0x37,0xF3};
    uint8_t in[96];
     uint8_t iv[16];
   
    uint8_t out[] = {
0x2F,0x2F,0x0F,0x9C,0x76,0xD7,0x97,0x1E,0x02,0x00,0x43,0x49,0x02,0x82,0x9A,0x4A,0xD3,0x14,0x6E,0xDA,0xFF,0xFA,0x5B,0x08,0x10,0x82,0x45,0x00,0x00,0x7B,0x01,0x59,0x38,0x00,0x00,0xFA,0x28,0x00,0x00,0x89,0x20,0x00,0x00,0x12,0x1F,0x00,0x00,0x70,0x1E,0x00,0x00,0x22,0x1E,0x00,0x00,0x83,0x1B,0x00,0x00,0x17,0x0C,0x00,0x00,0x96,0x00,0x00,0x00,0x67,0x00,0x00,0x00,0x67,0x00,0x00,0x00,0x66,0x00,0x00,0x00,0xA0,0x1B,0xFE,0xCE,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x06,0x61};
    //  uint8_t buffer[64];
    struct AES_ctx ctx;
 generate_iv(packet,iv);
 extract_payload(packet, in);
 printf("IV:\n");
 phex(iv);

    AES_init_ctx_iv(&ctx, key, iv);


 printf("Decrypting Payload:\n");
 phexWithoutSeparator(in,96);
    AES_CBC_decrypt_buffer(&ctx, in, 96);
    printf("Decrypted Payload:\n");
phexWithoutSeparator(in, 96);

    printf("CBC decrypt: ");

    if (0 == memcmp((char *)out, (char *)in, 96))
    {
        printf("SUCCESS!\n");
        TEST_ASSERT_EQUAL(1, 1);
    }
    else
    {
        printf("FAILURE!\n");
        TEST_ASSERT_EQUAL(1, 0);
    }
}

void test_decode(void)
{
    uint8_t out[] = {
0x2f,0x2f,0x0f,0xd0,0x44,0x57,0x97,0x1e,0x02,0x00,0x43,0x37,0x02,0x84,0x50,0xab,
0xf5,0xf9,0x30,0xf6,0x13,0x2a,0x00,0x00,0x10,0x5f,0x3a,0x00,0x00,0x7b,0x01,0x59,
0x38,0x00,0x00,0xfa,0x28,0x00,0x00,0x89,0x20,0x00,0x00,0x12,0x1f,0x00,0x00,0x70,
0x1e,0x00,0x00,0x22,0x1e,0x00,0x00,0x83,0x1b,0x00,0x00,0x17,0x0c,0x00,0x00,0x96,
0x00,0x00,0x00,0x67,0x00,0x00,0x00,0x67,0x00,0x00,0x00,0x66,0x00,0x00,0x00,0xa0,
0x1b,0xfe,0xce,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xec,0x52,};
    float usage= get_value(out);
    float expected = 14.943;
    int isValid=usage ==expected?1:0;
    TEST_ASSERT_EQUAL(1, isValid);
}



void test_iv(void)
{
uint8_t iv[16];
uint8_t expected_iv[16]={0x01,0x06,0x87,0x98,0x71,0x02,0x05,0x07,0xE7,0xE7,0xE7,0xE7,0xE7,0xE7,0xE7,0xE7};
uint8_t packet[14]={0x6E,0x44,0x01,0x06,0x87,0x98,0x71,0x02,0x05,0x07,0x0F,0x97,0x7A,0xE7};
//6E4401068798710205070F977AE7006085C74BBFC1FBCE79C9ABE7E8484F3ED3F13795BAE3A0BF666661B4C84ABFE5D21F7167441BA927A6CE2E0AFADFE4FB112CE213D6BAD1B5333B5024504742599BEBA03D2CC623362E384FB3904D9544A09DDB62392DEE2177641D5D614464E9B5656ECAA56009F1ACBF854A8A69483C
   
generate_iv(packet,iv);


    phex(iv);
    TEST_ASSERT_EQUAL(0, memcmp((char *)iv, (char *)expected_iv, 16));
    
}

int main(int argc, char **argv)
{

    UNITY_BEGIN();
    //RUN_TEST(test_decrypt_cbc);
    //RUN_TEST(test_decrypt_cbc_mine);
    //RUN_TEST(test_decrypt_cbc_mine_2);
    RUN_TEST(test_decrypt_cbc_mine_3);
    //RUN_TEST(test_decode);
    //RUN_TEST(test_iv);
    UNITY_END();
    return 0;
}